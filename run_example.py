#!/usr/bin/env python3
"""
Exemple d'utilisation de l'IA G√©n√©ratrice de Vid√©os
==================================================

Ce script montre comment utiliser les composants individuellement
pour g√©n√©rer une vid√©o de d√©monstration.
"""

import os
from config import Config
from content_generator import ContentGenerator
from video_generator import VideoGenerator

def create_demo_video():
    """Cr√©er une vid√©o de d√©monstration"""
    
    print("üé¨ Cr√©ation d'une vid√©o de d√©monstration...")
    
    # V√©rifier la configuration
    try:
        Config.validate_config()
        Config.ensure_directories()
    except Exception as e:
        print(f"‚ùå Erreur de configuration: {e}")
        print("üí° Assurez-vous d'avoir configur√© votre fichier .env")
        return False
    
    # Initialiser les g√©n√©rateurs
    content_gen = ContentGenerator()
    video_gen = VideoGenerator()
    
    try:
        # G√©n√©rer le contenu
        print("üìù G√©n√©ration du contenu...")
        content_data = content_gen.generate_daily_content()
        
        if not content_data:
            print("‚ùå √âchec de la g√©n√©ration du contenu")
            return False
        
        print(f"‚úÖ Contenu g√©n√©r√©:")
        print(f"   Titre: {content_data['title']}")
        print(f"   Mots-cl√©s: {content_data['keywords']}")
        print(f"   Script: {len(content_data['script'])} caract√®res")
        
        # Cr√©er la vid√©o
        print("üéûÔ∏è Cr√©ation de la vid√©o...")
        video_path = video_gen.create_video(content_data)
        
        if video_path:
            # Obtenir les informations de la vid√©o
            video_info = video_gen.get_video_info(video_path)
            
            print(f"‚úÖ Vid√©o cr√©√©e avec succ√®s!")
            print(f"üìÅ Chemin: {video_path}")
            
            if video_info:
                print(f"‚è±Ô∏è Dur√©e: {video_info['duration']:.1f} secondes")
                print(f"üìê R√©solution: {video_info['size'][0]}x{video_info['size'][1]}")
                print(f"üíæ Taille du fichier: {video_info['file_size'] / (1024*1024):.1f} MB")
            
            return video_path
        else:
            print("‚ùå √âchec de la cr√©ation de la vid√©o")
            return False
    
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        return False

def create_custom_video():
    """Cr√©er une vid√©o avec contenu personnalis√©"""
    
    print("üé® Cr√©ation d'une vid√©o personnalis√©e...")
    
    # Contenu personnalis√©
    custom_content = {
        'title': 'Bienvenue dans l\'IA G√©n√©ratrice de Vid√©os!',
        'script': '''
        Bonjour et bienvenue! Cette vid√©o a √©t√© enti√®rement g√©n√©r√©e par intelligence artificielle.
        
        Notre syst√®me combine plusieurs technologies avanc√©es pour cr√©er du contenu vid√©o automatiquement.
        
        Nous utilisons GPT-4 pour g√©n√©rer des scripts engageants, Google Text-to-Speech pour la narration,
        et Python avec MoviePy pour l'assemblage vid√©o final.
        
        Cette d√©monstration prouve que l'IA peut cr√©er du contenu √©ducatif de qualit√© de mani√®re autonome.
        
        Merci de votre attention et √† bient√¥t pour de nouvelles cr√©ations automatis√©es!
        ''',
        'keywords': 'ia, intelligence artificielle, vid√©o, automatisation, d√©monstration'
    }
    
    try:
        Config.ensure_directories()
        video_gen = VideoGenerator()
        
        # Cr√©er la vid√©o personnalis√©e
        video_path = video_gen.create_video(custom_content)
        
        if video_path:
            print(f"‚úÖ Vid√©o personnalis√©e cr√©√©e: {video_path}")
            return video_path
        else:
            print("‚ùå √âchec de la cr√©ation de la vid√©o personnalis√©e")
            return False
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    """Fonction principale"""
    
    print("üé• EXEMPLES D'UTILISATION - IA G√âN√âRATRICE DE VID√âOS")
    print("=" * 55)
    
    while True:
        print("\nOptions disponibles:")
        print("1. Cr√©er une vid√©o de d√©monstration (avec IA)")
        print("2. Cr√©er une vid√©o personnalis√©e (contenu fixe)")
        print("3. Voir la configuration actuelle")
        print("4. Quitter")
        
        choice = input("\nVotre choix (1-4): ").strip()
        
        if choice == '1':
            result = create_demo_video()
            if result:
                print(f"\nüéâ Succ√®s! Vid√©o disponible dans: {result}")
        
        elif choice == '2':
            result = create_custom_video()
            if result:
                print(f"\nüéâ Succ√®s! Vid√©o personnalis√©e cr√©√©e: {result}")
        
        elif choice == '3':
            print(f"\nüìã Configuration actuelle:")
            print(f"   R√©pertoire de sortie: {Config.OUTPUT_DIRECTORY}")
            print(f"   Cat√©gorie de contenu: {Config.VIDEO_TOPIC_CATEGORY}")
            print(f"   Langue: {Config.CONTENT_LANGUAGE}")
            print(f"   Dur√©e vid√©o: {Config.VIDEO_DURATION}s")
            print(f"   R√©solution: {Config.VIDEO_WIDTH}x{Config.VIDEO_HEIGHT}")
            
            # V√©rifier si les r√©pertoires existent
            if os.path.exists(Config.OUTPUT_DIRECTORY):
                videos = [f for f in os.listdir(Config.OUTPUT_DIRECTORY) if f.endswith('.mp4')]
                print(f"   Vid√©os existantes: {len(videos)}")
            else:
                print(f"   R√©pertoire de sortie: non cr√©√©")
        
        elif choice == '4':
            print("\nüëã Au revoir!")
            break
        
        else:
            print("‚ùå Choix invalide, veuillez r√©essayer.")

if __name__ == "__main__":
    main()